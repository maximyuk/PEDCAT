from aiogram import F, Router, types
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.keyboards import *
from src.data_base import Database
from src.utils import is_super_admin, password_for_admin, get_current_date, clear_all

import aiohttp
import asyncio

router = Router()


class FSMSuperAdminPanel(StatesGroup):
    add_or_change_calls = State()
    add_or_change_schedule_name = State()
    add_or_change_schedule_photo = State()
    add_group_name = State()
    add_or_change_any_photo = State()
    delete_group_name = State()


@router.callback_query(F.data == "–û–Ω–æ–≤–∏—Ç–∏ üìÖ")
async def add_or_change_schedule1(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑—ñ —Å–ø–∏—Å–∫—É ‚¨áÔ∏è", reply_markup=await group_selection_student_kb()
    )
    await state.set_state(FSMSuperAdminPanel.add_or_change_schedule_name)
    

@router.callback_query(FSMSuperAdminPanel.add_or_change_schedule_name)
async def add_or_change_schedule_get_name_group(
    query: types.CallbackQuery, state: FSMContext
):
    await query.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ üñº\n–ó —É–≤—ñ–º–∫–Ω—É—Ç–∏–º —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è–º —Ç–∞ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏ —É –æ–ø–∏—Å—ñ",
        reply_markup=None,
    )
    await state.set_state(FSMSuperAdminPanel.add_or_change_schedule_photo)
    await state.update_data(name_group=query.data, message=query.message)


@router.message(F.photo, FSMSuperAdminPanel.add_or_change_schedule_photo)
async def add_or_change_schedule2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    date = f"–ó–º—ñ–Ω–µ–Ω–æ: {get_current_date()}"
    data = (await state.get_data())["name_group"]
    

    await message.answer("–§–æ—Ç–æ –≥—Ä—É–ø–∏ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await clear_all(message, state)

    await db.student_group_photo_update(data, message.photo[0].file_id, date)



@router.message(F.text.startswith("sql "))
async def sql(message: types.Message) -> None:
    if not await is_super_admin(message):
        return

    db = await Database.setup()
    await db.sql_request(message.text[4:])
    await message.answer("GOOD JOB")


@router.callback_query(F.data == "–ü–∞—Ä–æ–ª—å üîê")
async def password(query: types.CallbackQuery) -> None:
    if not await is_super_admin(query):
        return

    await query.answer(f"PASSWORD : {password_for_admin()}", show_alert=True)


@router.callback_query(F.data == "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö üñ•")
async def send_file_db(query: types.CallbackQuery) -> None:
    if not await is_super_admin(query):
        return

    file_path = types.FSInputFile("data/database.db")
    await query.bot.send_document(query.from_user.id, file_path)
    await query.answer()


@router.callback_query(F.data == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def super_admin_back(query: types.CallbackQuery, state: FSMContext):
    text = f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º üéõ\n"

    await state.clear()
    await query.message.edit_text(text=text, reply_markup=super_admin_kb())


@router.callback_query(F.data == "–ì—Ä—É–ø–∏ üë•")
async def choice_in_panel1(query: types.CallbackQuery):
    text = (
        f"–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ì—Ä—É–ø–∞–º–∏ üéõ\n" f"‚Ä¢ –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É üë•\n" f"‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É üë•\n"
    )

    await query.message.edit_text(text=text, reply_markup=super_admin_group())


@router.callback_query(F.data == "–ó–º—ñ–Ω–∏—Ç–∏ üîî")
async def add_or_change_calls1(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ üñº\n–ó —É–≤—ñ–º–∫–Ω—É—Ç–∏–º —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è–º", reply_markup=super_admin_back_kb()
    )
    await state.set_state(FSMSuperAdminPanel.add_or_change_calls)
    await state.update_data(message=query.message)


@router.message(F.photo, FSMSuperAdminPanel.add_or_change_calls)
async def add_or_change_calls2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    date = f"–ó–º—ñ–Ω–µ–Ω–æ: {get_current_date()}"

    await message.answer("–§–æ—Ç–æ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", reply_markup=super_admin_kb())
    await clear_all(message, state)

    if await db.photo_exists("calls"):
        await db.update_photo(
            name_photo="calls", photo=message.photo[0].file_id, date_photo=date
        )
        return

    await db.add_photo(
        name_photo="calls", photo=message.photo[0].file_id, date_photo=date
    )


@router.callback_query(F.data == "–î–æ–¥–∞—Ç–∏ üë•")
async def add_student(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ ‚¨áÔ∏è", reply_markup=super_admin_back_kb()
    )
    await state.set_state(FSMSuperAdminPanel.add_group_name)


@router.message(F.text, FSMSuperAdminPanel.add_group_name)
async def add_student2(message: types.Message, state: FSMContext):
    db = await Database.setup()
    user_message = message.text

    await db.add_student_group(user_message)

    await message.answer("–ì—Ä—É–ø–∞ –¥–æ–¥–∞–Ω–∞ ‚úÖ", reply_markup=super_admin_back_kb())
    await state.clear()


@router.callback_query(F.data == "–í–∏–¥–∞–ª–∏—Ç–∏ üë•")
async def delete_student(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=await group_selection_student_kb(),
    )

    await state.set_state(FSMSuperAdminPanel.delete_group_name)


@router.callback_query(F.data, FSMSuperAdminPanel.delete_group_name)
async def delete_student2(query: types.CallbackQuery, state: FSMContext):
    db = await Database.setup()
    group_name = query.data

    await db.delete_student_group(group_name)

    await query.message.edit_text(
        f"–ì—Ä—É–ø–∞ {group_name} –≤–∏–¥–∞–ª–µ–Ω–∞ ‚úÖ", reply_markup=super_admin_back_kb()
    )
    await state.clear()



# @router.callback_query(F.data == "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ —Ç–≤–∞—Ä–∏–Ω–∫–∏")
# async def add_animal_photo(message: types.Message):
#     db = await Database.setup()

#     # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ —ñ –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#     photo = message.photo[-1].file_id  # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª —Ñ–æ—Ç–æ (–Ω–∞–π–∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å)
#     caption = message.caption if message.caption else "–§–æ—Ç–æ —Ç–≤–∞—Ä–∏–Ω–∫–∏"
#     name_photo = caption  # –ú–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ –ø—ñ–¥–ø–∏—Å—É —á–∏ —ñ–Ω—à–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∏
#     date_photo = get_current_date()  # –ó–∞–¥–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    
#     # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ —Ç–≤–∞—Ä–∏–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
#     await db.add_animal_photo(name_photo, photo, date_photo)

#     # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
#     await message.answer("–§–æ—Ç–æ —Ç–≤–∞—Ä–∏–Ω–∫–∏ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É ‚úÖ", reply_markup=admin_kb())